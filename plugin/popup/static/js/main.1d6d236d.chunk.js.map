{"version":3,"sources":["store/app-data-context.ts","constants/constants.ts","constants/action-types.ts","reducers/index.ts","utils/combine-reducers.ts","reducers/trucks.ts","reducers/login.ts","reducers/searching.ts","components/app-data-provider.tsx","utils/storage.ts","components/trucks/show-truck-list-button.tsx","components/trucks/truck-list-item.tsx","components/trucks/no-trucks.tsx","components/trucks/add-truck-button.tsx","components/trucks/truck-list.tsx","components/trucks/truck-list-wrapper.tsx","actions/trucks.ts","components/fetch-button.tsx","actions/config.ts","components/login/greetings.tsx","components/login/form.tsx","services.ts","components/login/login.tsx","components/app-content.tsx","app.tsx","config/service-worker.js","index.js"],"names":["AppDataContext","React","createContext","trucks","isLoggedIn","isSearching","dispatch","undefined","defaultStorage","isInitialized","refreshRate","CHROME_DATA_KEYS","ACTION_TYPE","ACTION_TYPE_STORAGE_KEY_MAP","ADD_TRUCK","EDIT_TRUCK","REMOVE_TRUCK","UPDATE_LOGIN_STATE","UPDATE_SEARCHING_STATE","rootReducer","reducers","reducerKeys","Object","keys","state","action","hasChanged","nextState","i","length","key","combineReducers","type","id","name","AppDataProvider","data","storage","children","useReducer","newState","set","getRootReducer","Provider","value","StorageService","nameSpace","Promise","resolve","reject","chrome","get","result","e","listener","onChanged","addListener","changes","areaName","newValue","then","all","entries","map","keyName","keyValue","allTrue","every","Boolean","reduce","acc","curr","JSON","parse","localStorage","getItem","ShowTruckListButton","props","isTrucksListShown","onTrucksListOpen","Fab","variant","size","color","aria-label","onClick","Input","styled","InputBase","TruckListItem","truck","onEditTruck","onRemoveTruck","useState","isEditing","setEditingMode","inputValue","setInputValue","ListItem","placeholder","readOnly","onChange","event","target","ListItemSecondaryAction","IconButton","Divider","Wrapper","div","NoTrucks","Box","fontWeight","fontSize","AddTruckButton","onAddTruck","Button","Paper","ListHeader","ListBody","List","TruckList","mappedTrucks","display","justifyContent","index","TruckListWrapper","onDispatch","toggleTrucksListVisibility","v4","editTruck","removeTruck","FetchButton","toggleSearching","endIcon","Message","Greetings","FormWrapper","FormWrapperInner","form","LoginField","TextField","PasswordField","LoginButton","Form","onSubmit","login","setLogin","password","setPassword","preventDefault","label","Auth","fetch","json","secrets","passHash","sha256","Login","a","async","AppContent","useContext","flexDirection","alignItems","App","isDataLoaded","setDataLoaded","setData","useEffect","getDataObject","fetchAppData","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1d6d236d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { AppData } from '../models/app-data';\r\n\r\nexport const AppDataContext = React.createContext<AppData & { dispatch: any }>({\r\n  trucks: { },\r\n  isLoggedIn: false,\r\n  isSearching: false,\r\n  dispatch: undefined as any,\r\n});\r\n","import {Storage} from \"../../../Shared/Models\";\r\n\r\nexport const ENV_DEVELOPMENT = 'development';\r\nexport const ENV_PRODUCTION = 'production';\r\n\r\nexport const CHROME_STORAGE_KEY = 'relayAuto';\r\nexport const defaultStorage: Storage = {\r\n  isInitialized: true,\r\n  isSearching: false,\r\n  refreshRate: 250,\r\n  isLoggedIn: true,\r\n  trucks: [],\r\n}\r\n\r\nexport const CHROME_DATA_KEYS = [\r\n  'trucks',\r\n  'isLoggedIn',\r\n  'isSearching',\r\n]","export const ACTION_TYPE = {\r\n  // Trucks\r\n  ADD_TRUCK: 'ADD_TRUCK',\r\n  EDIT_TRUCK: 'EDIT_TRUCK',\r\n  REMOVE_TRUCK: 'REMOVE_TRUCK',\r\n  UPDATE_LOGIN_STATE: 'UPDATE_LOGIN_STATE',\r\n  UPDATE_SEARCHING_STATE: 'UPDATE_SEARCHING_STATE',\r\n};\r\n\r\nexport const ACTION_TYPE_STORAGE_KEY_MAP = {\r\n  // Trucks\r\n  ADD_TRUCK: 'trucks',\r\n  EDIT_TRUCK: 'trucks',\r\n  REMOVE_TRUCK: 'trucks',\r\n  UPDATE_LOGIN_STATE: 'isLoggedIn',\r\n  UPDATE_SEARCHING_STATE: 'isSearching',\r\n};\r\n","import { trucksReducer } from './trucks';\r\nimport { loginReducer } from './login';\r\nimport { searchingReducer } from './searching';\r\nimport { combineReducers } from '../utils/combine-reducers';\r\nimport { ACTION_TYPE_STORAGE_KEY_MAP } from '../constants/action-types';\r\n\r\nexport const rootReducer = combineReducers({\r\n  trucks: trucksReducer,\r\n  isLoggedIn: loginReducer,\r\n  isSearching: searchingReducer,\r\n});\r\n\r\nexport const getRootReducer = (storage: any) => (state: any, action: any) => {\r\n  const newState = rootReducer(state, action);\r\n  // @ts-ignore\r\n  const key: string = ACTION_TYPE_STORAGE_KEY_MAP[action.type as string];\r\n  storage.set(key, newState[key]);\r\n  return newState;\r\n};\r\n","/* eslint-disable */\r\n\r\nexport function combineReducers (reducers: any = {}) {\r\n  const reducerKeys = Object.keys(reducers);\r\n  return function combination(state: any = { }, action: string) {\r\n    let hasChanged = false;\r\n    let nextState: any = { };\r\n    for (let i = 0; i < reducerKeys.length; i++) {\r\n      let key = reducerKeys[i];\r\n      nextState[key] = reducers[key](state[key], action);\r\n      hasChanged = hasChanged || nextState[key] !== state[key];\r\n    }\r\n    return hasChanged ? nextState : state;\r\n  };\r\n}\r\n","import { ACTION_TYPE } from '../constants';\r\nimport { Trucks } from '../models/truck';\r\n\r\nexport const trucksReducer = (state: Trucks, action: any) => {\r\n  switch (action.type) {\r\n    case ACTION_TYPE.ADD_TRUCK:\r\n      return {\r\n        ...state,\r\n        [action.id]: {\r\n          id: action.id,\r\n          name: action.name,\r\n        },\r\n      };\r\n    case ACTION_TYPE.EDIT_TRUCK:\r\n      return {\r\n        ...state,\r\n        [action.id]: {\r\n          ...state[action.id],\r\n          name: action.name,\r\n        },\r\n      };\r\n    case ACTION_TYPE.REMOVE_TRUCK: {\r\n      const trucks = { ...state };\r\n      delete trucks[action.id];\r\n      return { ...trucks };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { ACTION_TYPE } from '../constants';\r\n\r\nexport const loginReducer = (state: boolean, action: any) => {\r\n  switch (action.type) {\r\n    case ACTION_TYPE.UPDATE_LOGIN_STATE: {\r\n      return action.state\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { ACTION_TYPE } from '../constants';\r\n\r\nexport const searchingReducer = (state: boolean, action: any) => {\r\n  switch (action.type) {\r\n    case ACTION_TYPE.UPDATE_SEARCHING_STATE: {\r\n      return action.state\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { useReducer } from 'react';\r\nimport { AppDataContext } from '../store/app-data-context';\r\nimport { AppData } from '../models/app-data';\r\nimport { getRootReducer } from '../reducers';\r\nimport { StorageService } from '../utils/storage';\r\n\r\nconst AppDataProvider = ({ data, storage, children }: PropTypes) => {\r\n  const [state, dispatch] = useReducer(getRootReducer(storage), { ...data });\r\n\r\n  return (\r\n    <AppDataContext.Provider value={{ ...state, dispatch }}>\r\n      {children}\r\n    </AppDataContext.Provider>\r\n  );\r\n};\r\n\r\ninterface PropTypes {\r\n  data: AppData\r\n  storage: StorageService\r\n  children: JSX.Element | JSX.Element[]\r\n}\r\n\r\nexport default AppDataProvider;\r\n","/* eslint-disable no-undef */\r\nimport { StorageServiceInterface } from \"../../../Shared/Services\";\r\nimport { defaultStorage } from \"../constants\";\r\n\r\nexport class StorageService implements StorageServiceInterface {\r\n  nameSpace = 'local';\r\n\r\n  get(key: string): Promise<any>  {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        // @ts-ignore\r\n        chrome.storage[this.nameSpace].get([`${key}`], (result) => {\r\n          resolve(result[`${key}`])\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  set(key: string | string[], value: any): Promise<boolean> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        chrome.storage[`${this.nameSpace}`].set({[`${key}`]: value }, () => resolve(true));\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds the listener to the storage\r\n   *\r\n   * @param listener The method to be executed, accepts the new value of the changed parameter\r\n   * @param key The key of the storage to be observed\r\n   * @param value Optional, the value on which the listener should trigger\r\n   */\r\n  addListener(listener: (val: any) => void, key: string, value?: any) {\r\n    chrome.storage.onChanged.addListener((changes: object, areaName: string) => {\r\n      if (\r\n        !changes[`${key}`]\r\n        || value && value !== changes[`${key}`].newValue\r\n        || areaName !== this.nameSpace) {\r\n        return;\r\n      }\r\n\r\n      listener(changes[`${key}`]);\r\n    });\r\n  }\r\n\r\n  initialize(): Promise<boolean> {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        this.get('isInitialized').then((isInitialized) => {\r\n          if(!isInitialized) {\r\n            Promise.all(Object.entries(defaultStorage).map(([keyName, keyValue]) =>\r\n              this.set(`${keyName}`, defaultStorage[keyValue]))).then((allTrue) => {\r\n                allTrue.every(Boolean)\r\n                  ? resolve(true)\r\n                  : reject('Some values in storage are not set successfully!');\r\n              }\r\n            );\r\n          }\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  public getDataObject(keys: string[]): Promise<any> {\r\n    return new Promise((resolve) => {\r\n      const res: any = keys.reduce(\r\n        (acc, curr) => ({\r\n          ...acc,\r\n          [curr]: JSON.parse(localStorage.getItem(curr) as string),\r\n        }), {},\r\n      );\r\n      return resolve(res);\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Fab } from \"@material-ui/core\";\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\r\n\r\nconst ShowTruckListButton = (props: PropTypes) => {\r\n  const { isTrucksListShown, onTrucksListOpen } = props;\r\n\r\n  return (\r\n    <Fab\r\n      variant=\"extended\"\r\n      size=\"medium\"\r\n      color=\"primary\"\r\n      aria-label=\"show-trucks\"\r\n      onClick={onTrucksListOpen}\r\n    >\r\n      Show Trucks\r\n      {\r\n        isTrucksListShown\r\n          ? <ExpandLessIcon />\r\n          : <ExpandMoreIcon />\r\n      }\r\n    </Fab>\r\n  );\r\n};\r\n\r\ninterface PropTypes {\r\n  isTrucksListShown: boolean\r\n  onTrucksListOpen: () => void\r\n}\r\n\r\nexport default ShowTruckListButton;\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport { Truck } from \"../../models/truck\";\r\nimport {Divider, IconButton, InputBase, ListItem, ListItemSecondaryAction} from \"@material-ui/core\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport styled from \"styled-components\";\r\n\r\nconst TruckListItem = (props: PropTypes) => {\r\n  const { truck, onEditTruck, onRemoveTruck } = props;\r\n  const [ isEditing, setEditingMode ] = useState<boolean>(false);\r\n  const [ inputValue, setInputValue ] = useState<string>(truck.name || \"\");\r\n\r\n  const confirmEditing = () => {\r\n    onEditTruck(inputValue);\r\n    setEditingMode(false);\r\n  }\r\n\r\n  const cancelEditing = () => {\r\n    setInputValue(truck.name);\r\n    setEditingMode(false);\r\n  }\r\n\r\n  const onEditItem = () => {\r\n    setInputValue(truck.name);\r\n    setEditingMode(true);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <ListItem>\r\n        {\r\n          <Input\r\n            placeholder=\"Name\"\r\n            readOnly={!isEditing}\r\n            value={isEditing ? inputValue : truck.name}\r\n            onChange={(event: ChangeEvent<HTMLInputElement>) => setInputValue(event.target.value)}\r\n          />\r\n        }\r\n        <ListItemSecondaryAction>\r\n          {\r\n            isEditing\r\n              ? (\r\n                <>\r\n                  <IconButton aria-label=\"edit\" onClick={confirmEditing}>\r\n                    <CheckIcon />\r\n                  </IconButton>\r\n                  <IconButton aria-label=\"delete\" onClick={cancelEditing}>\r\n                    <CloseIcon />\r\n                  </IconButton>\r\n                </>\r\n              )\r\n              : (\r\n                <>\r\n                  <IconButton aria-label=\"edit\" onClick={onEditItem}>\r\n                    <EditIcon />\r\n                  </IconButton>\r\n                  <IconButton aria-label=\"delete\" onClick={onRemoveTruck}>\r\n                    <DeleteIcon />\r\n                  </IconButton>\r\n                </>\r\n              )\r\n          }\r\n        </ListItemSecondaryAction>\r\n      </ListItem>\r\n      <Divider />\r\n    </>\r\n  );\r\n};\r\n\r\nconst Input = styled(InputBase)`\r\n  width: 100%;\r\n`;\r\n\r\ninterface PropTypes {\r\n  truck: Truck\r\n  onEditTruck: (name: string) => any\r\n  onRemoveTruck: () => any\r\n}\r\n\r\nexport default TruckListItem;\r\n","import React from 'react';\r\nimport {Box} from \"@material-ui/core\";\r\nimport styled from \"styled-components\";\r\n\r\nconst NoTrucks = () => {\r\n  return (\r\n    <Wrapper>\r\n      <Box\r\n        fontWeight={500}\r\n        fontSize={20}\r\n      >\r\n        You have no trucks yet.\r\n      </Box>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  margin-top: 100px;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\nexport default NoTrucks;\r\n","import React from 'react';\r\nimport { Button, PropTypes } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n\r\nconst AddTruckButton = (props: PropTypes) => {\r\n  const { onAddTruck } = props;\r\n\r\n  return (\r\n    <Button\r\n      variant=\"contained\"\r\n      color=\"primary\"\r\n      onClick={onAddTruck}\r\n    >\r\n      Add\r\n      <AddIcon />\r\n    </Button>\r\n  );\r\n};\r\n\r\ninterface PropTypes {\r\n  onAddTruck: () => void\r\n}\r\nexport default AddTruckButton;\r\n","import React from 'react';\r\nimport { Box, Divider, List, Paper } from \"@material-ui/core\";\r\nimport styled from \"styled-components\";\r\nimport { Truck, Trucks } from \"../../models/truck\";\r\nimport TruckListItem from \"./truck-list-item\";\r\nimport NoTrucks from \"./no-trucks\";\r\nimport AddTruckButton from \"./add-truck-button\";\r\n\r\nconst TruckList = (props: PropTypes) => {\r\n  const { trucks, onAddTruck, onEditTruck, onRemoveTruck } = props;\r\n  const mappedTrucks: Truck[] = Object.keys(trucks).map(id => trucks[id]);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ListHeader\r\n        display=\"flex\"\r\n        justifyContent=\"flex-end\"\r\n      >\r\n        <AddTruckButton\r\n          onAddTruck={onAddTruck}\r\n        />\r\n      </ListHeader>\r\n      <Divider />\r\n      {\r\n        mappedTrucks.length\r\n          ? (\r\n            <ListBody>\r\n              {\r\n                mappedTrucks.map((truck, index) => (\r\n                  <TruckListItem\r\n                    key={index}\r\n                    truck={truck}\r\n                    onEditTruck={(name: string) => onEditTruck(truck.id, name)}\r\n                    onRemoveTruck={() => onRemoveTruck(truck.id)}\r\n                  />\r\n                ))\r\n              }\r\n            </ListBody>\r\n          )\r\n          : <NoTrucks />\r\n      }\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled(Paper)`\r\n  width: 100%;\r\n  margin-top: 25px;\r\n  background: #fff;\r\n  height: 300px;\r\n  max-height: 300px;\r\n  overflow: auto;\r\n`;\r\n\r\nconst ListHeader = styled(Box)`\r\n  padding: 10px;\r\n`;\r\n\r\nconst ListBody = styled(List)`\r\n  padding-bottom: 0 !important;\r\n`;\r\n\r\ninterface PropTypes {\r\n  trucks: Trucks\r\n  onAddTruck: () => void\r\n  onEditTruck: (id: string, name: string) => any\r\n  onRemoveTruck: (id: string) => any\r\n}\r\n\r\nexport default TruckList;\r\n","import React, { useMemo, useState } from 'react';\r\nimport ShowTruckListButton from \"./show-truck-list-button\";\r\nimport TruckList from \"./truck-list\";\r\nimport { Trucks } from \"../../models/truck\";\r\nimport {addTruck, editTruck, removeTruck} from \"../../actions/trucks\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TruckListWrapper = (props: PropTypes) => {\r\n  const { trucks, onDispatch } = props;\r\n  const [ isTrucksListShown, toggleTrucksListVisibility ] = useState<boolean>(false);\r\n\r\n  const onAddTruck = () => onDispatch(addTruck(\"\"));\r\n  const onEditTruck = (id: string, name: string) => onDispatch(editTruck(id, name));\r\n  const onRemoveTruck = (id: string) => onDispatch(removeTruck(id));\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ShowTruckListButton\r\n        isTrucksListShown={isTrucksListShown}\r\n        onTrucksListOpen={() => toggleTrucksListVisibility(!isTrucksListShown)}\r\n      />\r\n      {\r\n        isTrucksListShown\r\n          ? (\r\n            <TruckList\r\n              trucks={trucks}\r\n              onAddTruck={onAddTruck}\r\n              onEditTruck={onEditTruck}\r\n              onRemoveTruck={onRemoveTruck}\r\n            />\r\n          )\r\n          : null\r\n      }\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-flow: column;\r\n  width: 100%;\r\n  margin-top: 50px;\r\n`;\r\n\r\ninterface PropTypes {\r\n  trucks: Trucks\r\n  onDispatch: (...args: any) => any\r\n}\r\n\r\nexport default TruckListWrapper;\r\n","import v4 from 'uuid/v4';\r\nimport { ACTION_TYPE } from '../constants';\r\n\r\nexport const addTruck = (name: string) => ({\r\n  type: ACTION_TYPE.ADD_TRUCK,\r\n  id: v4(),\r\n  name,\r\n});\r\n\r\nexport const editTruck = (id: string, name: string) => ({\r\n  type: ACTION_TYPE.EDIT_TRUCK,\r\n  id,\r\n  name,\r\n});\r\n\r\nexport const removeTruck = (id: string) => ({\r\n  type: ACTION_TYPE.REMOVE_TRUCK,\r\n  id,\r\n});\r\n","import React from 'react';\r\nimport { Button } from \"@material-ui/core\";\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport StopIcon from '@material-ui/icons/Stop';\r\nimport { updateSearchingState } from \"../actions/config\";\r\n\r\nconst FetchButton = (props: PropTypes) => {\r\n  const { isSearching, onDispatch } = props;\r\n\r\n  const toggleSearching = () => {\r\n    onDispatch(updateSearchingState(!isSearching));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {\r\n        !isSearching ? (\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            endIcon={<PlayArrowIcon />}\r\n            onClick={toggleSearching}\r\n          >\r\n            Start\r\n          </Button>\r\n        ) : (\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            endIcon={<StopIcon />}\r\n            onClick={toggleSearching}\r\n          >\r\n            Stop\r\n          </Button>\r\n        )\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\ninterface PropTypes {\r\n  isSearching: boolean\r\n  onDispatch: Function\r\n}\r\n\r\nexport default FetchButton;","import { ACTION_TYPE } from \"../constants\";\r\n\r\nexport const updateLoginState = (state: boolean) => ({\r\n  type: ACTION_TYPE.UPDATE_LOGIN_STATE,\r\n  state\r\n});\r\n\r\nexport const updateSearchingState = (state: boolean) => ({\r\n  type: ACTION_TYPE.UPDATE_SEARCHING_STATE,\r\n  state\r\n});\r\n","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport {Box} from \"@material-ui/core\";\r\n\r\nconst Greetings = () => {\r\n  return (\r\n    <Wrapper>\r\n      <Message>\r\n        Relay Auto 📦\r\n      </Message>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled(Box)`\r\n  width: 100%;\r\n  height: 150px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background: #6498FE;\r\n`\r\n\r\nconst Message = styled(Box)`\r\n  font-weight: bold;\r\n  display: block;\r\n  font-size: 40px;\r\n  color: #fff;\r\n`\r\n\r\nexport default Greetings;\r\n","import React, {ChangeEvent, FormEvent, useState} from 'react';\r\nimport styled from \"styled-components\";\r\nimport { Box, Button, TextField } from \"@material-ui/core\";\r\n\r\nconst Form = (props: PropTypes) => {\r\n  const { onSubmit } = props;\r\n  const [ login, setLogin ] = useState<string>(\"\");\r\n  const [ password, setPassword ] = useState<string>(\"\");\r\n\r\n  const handleSubmit = (event: FormEvent) => {\r\n    // TODO: Validation\r\n    event.preventDefault();\r\n    onSubmit({ login, password });\r\n  }\r\n\r\n  return (\r\n    <FormWrapper>\r\n      <FormWrapperInner\r\n        name=\"login-form\"\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <LoginField\r\n          label=\"Login\"\r\n          onChange={(event: ChangeEvent<HTMLInputElement>) => setLogin(event.target.value)}\r\n        />\r\n        <PasswordField\r\n          label=\"Password\"\r\n          type=\"password\"\r\n          onChange={(event: ChangeEvent<HTMLInputElement>) => setPassword(event.target.value)}\r\n        />\r\n        <LoginButton\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n        >\r\n          Login\r\n        </LoginButton>\r\n      </FormWrapperInner>\r\n    </FormWrapper>\r\n  );\r\n};\r\n\r\nconst FormWrapper = styled(Box)`\r\n  width: 40%;\r\n  height: 450px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: flex-end;\r\n`;\r\n\r\nconst FormWrapperInner = styled.form`\r\n  width: 100%;\r\n  margin-top: -40px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: flex-end;\r\n`;\r\n\r\nconst LoginField = styled(TextField)`\r\n  width: 100%;\r\n`;\r\n\r\nconst PasswordField = styled(TextField)`\r\n  width: 100%;\r\n`;\r\n\r\nconst LoginButton = styled(Button)`\r\n  margin-top: 30px !important;\r\n`;\r\n\r\ninterface PropTypes {\r\n  onSubmit: (userData :{ login: string, password: string }) => any\r\n}\r\n\r\nexport default Form;\r\n","import { sha256 } from 'js-sha256';\r\n\r\nexport interface AuthResult {\r\n  isSuccess: boolean\r\n  encryption: string\r\n}\r\n\r\nexport class Auth {\r\n  static async login(login: string, password: string): Promise<boolean> {\r\n    try {\r\n      const result = await fetch('https://raw.githubusercontent.com/abrorAbdullaev/RelayAuth/master/authv2.json');\r\n      const secrets = await result.json();\r\n      const passHash: string | undefined = secrets[sha256(login)];\r\n      return !!(passHash && passHash === sha256(password));\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n}","import React from 'react';\r\nimport styled from \"styled-components\";\r\nimport Greetings from \"./greetings\";\r\nimport Form from \"./form\";\r\nimport { updateLoginState } from \"../../actions/config\";\r\nimport { Auth } from \"../../services\";\r\n\r\nconst Login = (props: PropTypes) => {\r\n  const { onDispatch } = props;\r\n\r\n  // TODO: useCallback?\r\n  const onSubmit = async ({ login, password }: { login: string, password: string }) => {\r\n    const loginStatus = await Auth.login(login, password);\r\n\r\n    if (loginStatus) {\r\n      onDispatch(updateLoginState(true));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Greetings/>\r\n      <Form\r\n        onSubmit={onSubmit}\r\n      />\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n`;\r\n\r\ninterface PropTypes {\r\n  onDispatch: Function\r\n}\r\n\r\nexport default Login;\r\n","import React, { useContext } from 'react';\r\nimport styled from \"styled-components\";\r\nimport TruckListWrapper from \"./trucks/truck-list-wrapper\";\r\nimport { AppDataContext } from \"../store/app-data-context\";\r\nimport FetchButton from \"./fetch-button\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Login from \"./login/login\";\r\n\r\nconst AppContent = () => {\r\n  const { trucks, isLoggedIn, isSearching, dispatch } = useContext(AppDataContext);\r\n\r\n  return (\r\n    isLoggedIn ? (\r\n      <Wrapper\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        alignItems=\"center\"\r\n      >\r\n        <FetchButton\r\n          isSearching={isSearching}\r\n          onDispatch={dispatch}\r\n        />\r\n        <TruckListWrapper\r\n          trucks={trucks}\r\n          onDispatch={dispatch}\r\n        />\r\n      </Wrapper>\r\n    ) : (\r\n      <Login\r\n        onDispatch={dispatch}\r\n      />\r\n    )\r\n  );\r\n};\r\n\r\nconst Wrapper = styled(Box)`\r\n  padding: 50px 100px 0;\r\n  width: 100%;\r\n`;\r\n\r\nexport default AppContent;","import React, { useEffect, useState } from 'react';\r\nimport AppDataProvider from './components/app-data-provider';\r\nimport LocalStorage from './utils/localStorage';\r\nimport { StorageService } from './utils/storage';\r\nimport { AppData } from './models/app-data';\r\nimport {CHROME_DATA_KEYS, ENV_DEVELOPMENT} from './constants';\r\nimport AppContent from './components/app-content';\r\nimport initialData from './mock/initial-data';\r\n\r\nconst storage: any = process.env.NODE_ENV === ENV_DEVELOPMENT\r\n  ? new LocalStorage() // Is used to imitate Chrome Extensions Storage API during dev process\r\n  : new StorageService();\r\n\r\nconst App = () => {\r\n  const [isDataLoaded, setDataLoaded] = useState<boolean>(false);\r\n  const [data, setData] = useState<AppData>({\r\n    trucks: {},\r\n    isLoggedIn: false,\r\n    isSearching: false,\r\n  });\r\n\r\n  const fetchAppData = async (): Promise<void> => {\r\n    const {\r\n      trucks,\r\n      isLoggedIn,\r\n      isSearching,\r\n    } = await storage.getDataObject([\r\n      ...CHROME_DATA_KEYS\r\n    ]);\r\n\r\n    setData({\r\n      ...data,\r\n      trucks: trucks || {},\r\n      isLoggedIn,\r\n      isSearching,\r\n    });\r\n\r\n    setDataLoaded(true);\r\n  };\r\n\r\n  const mockData = () => {\r\n    storage.set('trucks', initialData.trucks);\r\n    storage.set('isLoggedIn', initialData.isLoggedIn);\r\n    storage.set('isSearching', initialData.isSearching);\r\n  }\r\n\r\n  useEffect((): void => {\r\n    // mockData();\r\n    fetchAppData().then();\r\n  }, []);\r\n\r\n  return (\r\n    isDataLoaded\r\n      ? (\r\n        <AppDataProvider storage={storage} data={data}>\r\n          <AppContent/>\r\n        </AppDataProvider>\r\n      ) : <span>Loading</span>\r\n  );\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost'\r\n    // [::1] is the IPv6 localhost address.\r\n    || window.location.hostname === '[::1]'\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    || window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service '\r\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all '\r\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404\r\n        || (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app';\r\nimport * as serviceWorker from './config/service-worker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service config: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}